{"version":3,"sources":["webpack:///path---docs-basics-index-f4a04026de23d96142c4.js","webpack:///./.cache/json/docs-basics-index.json"],"names":["webpackJsonp","307","module","exports","data","markdownRemark","html","pathContext","relativePath"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,glCAAslCC,aAAgBC,aAAA","file":"path---docs-basics-index-f4a04026de23d96142c4.js","sourcesContent":["webpackJsonp([239633598554851],{\n\n/***/ 307:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Hadron is a high-level Node.js framework built on top of Express (with support for other micro frameworks coming in the future).</p>\\n<p>It abstracts away underlying request and response objects, providing simple data structures as input and output of your routes' handlers, making them simple to test and easy to deal with.</p>\\n<p>Thanks to using dependency injection containers as a central dependency management solution, it provides a convenient way to access all dependencies in handler functions.</p>\\n<p>Hadron is modular, in addition to core functionalities mentioned above we provide a complete solution for requests processing via separate packages:</p>\\n<ul>\\n<li>security management</li>\\n<li>input validation</li>\\n<li>database integration (through TypeORM)</li>\\n<li>data serialization</li>\\n<li>logging</li>\\n<li>events handling</li>\\n<li>CLI tool</li>\\n</ul>\\n<p>Hadron is built with TypeScript, but it's primary target are JavaScript apps - we build our API to embrace current ECMAScript standards, with the cherry of good IDE support via codebase types declarations on top.</p>\"}},\"pathContext\":{\"relativePath\":\"GDK>../docs/basics/index.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-basics-index-f4a04026de23d96142c4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Hadron is a high-level Node.js framework built on top of Express (with support for other micro frameworks coming in the future).</p>\\n<p>It abstracts away underlying request and response objects, providing simple data structures as input and output of your routes' handlers, making them simple to test and easy to deal with.</p>\\n<p>Thanks to using dependency injection containers as a central dependency management solution, it provides a convenient way to access all dependencies in handler functions.</p>\\n<p>Hadron is modular, in addition to core functionalities mentioned above we provide a complete solution for requests processing via separate packages:</p>\\n<ul>\\n<li>security management</li>\\n<li>input validation</li>\\n<li>database integration (through TypeORM)</li>\\n<li>data serialization</li>\\n<li>logging</li>\\n<li>events handling</li>\\n<li>CLI tool</li>\\n</ul>\\n<p>Hadron is built with TypeScript, but it's primary target are JavaScript apps - we build our API to embrace current ECMAScript standards, with the cherry of good IDE support via codebase types declarations on top.</p>\"}},\"pathContext\":{\"relativePath\":\"GDK>../docs/basics/index.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-basics-index.json\n// module id = 307\n// module chunks = 239633598554851"],"sourceRoot":""}