webpackJsonp([83060130832678],{310:function(n,a){n.exports={data:{markdownRemark:{html:'<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @brainhubeu/hadron-oauth --save </code></pre>\n      </div>\n<p><a href="/gatsby-docs-kit-starter/docs/basics/core/#installation">More info about installation</a></p>\n<h2 id="overview"><a href="#overview" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>\n<p><code class="language-text">hadron-oauth</code> is a Hadron utility package to simplify working with OAuth providers, such as Google and Facebook. It provides several utility functions that you can use to make writing OAuth2 authentication quicker and more streamlined.</p>\n<h2 id="tutorial"><a href="#tutorial" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h2>\n<h3 id="understanding-oauth-flow"><a href="#understanding-oauth-flow" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Understanding OAuth flow</h3>\n<p>The plan for our authentication flow is as follows:</p>\n<ul>\n<li>The client makes a <code class="language-text">GET</code> request to <code class="language-text">/auth/{provider}</code> to begin the process of authentication.</li>\n<li>The server redirects the client to a provider consent site.</li>\n<li>The client receives an auth code.</li>\n<li>The client makes a <code class="language-text">POST</code> request to <code class="language-text">/auth/{provider}/token</code> to exchange the auth code for an access token.</li>\n</ul>\n<p>We can then use the access token to make further request to the provider\'s API in order to fetch data about the user (such as their name or email).</p>\n<h3 id="configuration"><a href="#configuration" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Configuration</h3>\n<p>We will need to provide certain information to <code class="language-text">hadron-oauth</code> before we can proceed with the auth process. This information exists in Hadron\'s config file.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// oauth.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  google<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    clientID<span class="token punctuation">:</span> <span class="token string">\'keyboard-cat\'</span><span class="token punctuation">,</span>\n    clientSecret<span class="token punctuation">:</span> <span class="token string">\'shhh\'</span><span class="token punctuation">,</span>\n    scope<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'https://www.googleapis.com/auth/userinfo.profile\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    redirectUri<span class="token punctuation">:</span> <span class="token string">\'http://localhost:8081/\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The <code class="language-text">clientID</code> and <code class="language-text">clientSecret</code> fields need to be the same as these given to you by your provider (such as the Google API Console). The <code class="language-text">redirectUri</code> must be exactly the same as the one given to your provider.</p>\n<p><code class="language-text">scope</code> is an array of strings defining the scopes your app requires from the user. See the <a href="https://developers.google.com/identity/protocols/googlescopes">Google scopes</a> and <a href="https://developers.facebook.com/docs/facebook-login/permissions/">Facebook scopes</a> for details. These can be used later to retrieve relevant data from your provider\'s APIs about the user.</p>\n<p>In this case, we\'ll also pretend that there is a dev server for React or Vue at <code class="language-text">http://localhost:8081</code>, however we can just as well redirect the calls back to our own server.</p>\n<p>It\'s recommended that you exclude this file from your version control or supply the specific config fields through environment variables as this file contains sensitive information.</p>\n<h3 id="registration"><a href="#registration" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Registration</h3>\n<p>Now that our config is created, we need to create our Hadron app entry point.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// index.js</span>\n<span class="token keyword">const</span> hadron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@brainhubeu/hadron-core\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> hadronExpress <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@brainhubeu/hadron-express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> hadronOauth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@brainhubeu/hadron-oauth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> oauthConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./oauth.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  oauth<span class="token punctuation">:</span> oauthConfig<span class="token punctuation">,</span>\n  routes<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      path<span class="token punctuation">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n      methods<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'GET\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'Hello!\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">hadron</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token punctuation">[</span>hadronExpress<span class="token punctuation">,</span> hadronOauth<span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hadron/Express listening on 8080.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>We now have access to the OAuth methods through the container.</p>\n<h3 id="auth-code-route"><a href="#auth-code-route" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Auth code route</h3>\n<p>Let\'s create a separate file to store the logic for our route endpoints. We\'ll first create a route to redirect to the consent screen.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// routes.js</span>\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  googleAuthRequest<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> <span class="token string">\'/auth/google\'</span><span class="token punctuation">,</span>\n    methods<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'GET\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">{</span> oauth <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      redirect<span class="token punctuation">:</span> oauth<span class="token punctuation">.</span>google<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> routes<span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// index.js</span>\n<span class="token keyword">const</span> oauthRoutes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./routes\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  routes<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>oauthRoutes<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now, whenever a client calls the <code class="language-text">/auth/google</code> endpoint, he or she will be redirected to the Google auth consent page.</p>\n<h3 id="handling-the-auth-code"><a href="#handling-the-auth-code" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Handling the auth code</h3>\n<p>Now, we\'ll delve into the client side here for a minute, because we need to send the auth code that the client receives back to the server.</p>\n<p>In the <code class="language-text">oauth.js</code> config file we defined a redirect to our front-end dev server. We now need to send the authorization code from that server back to our app.</p>\n<p>We can do it like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// client side javascript</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> code <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'code\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>code<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'http://localhost:8080/auth/google/token\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  method<span class="token punctuation">:</span> <span class="token string">\'POST\'</span><span class="token punctuation">,</span>\n  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">\'content-type\'</span><span class="token punctuation">:</span> <span class="token string">\'application/json\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  body<span class="token punctuation">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="exchanging-the-code-for-an-access-token"><a href="#exchanging-the-code-for-an-access-token" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exchanging the code for an access token.</h3>\n<p>We\'ll define another route to exchange the auth code for an access token.</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// routes.js</span>\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  googleAuthRequest<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  googleTokenRequest<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> <span class="token string">\'/auth/google/token\'</span><span class="token punctuation">,</span>\n    methods<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'POST\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">{</span> oauth <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      oauth<span class="token punctuation">.</span>google<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>access_token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// do things with the token...</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> routes<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now that we have the access token we can implement other features, such as our own authentication. We can also call the Google API in the name of the user to pull any relevant information we need.</p>\n<h2 id="reference"><a href="#reference" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reference</h2>\n<h3 id="config"><a href="#config" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Config</h3>\n<h4 id="code-classlanguage-textgooglecode"><a href="#code-classlanguage-textgooglecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">google.</code></h4>\n<ul>\n<li><code class="language-text">clientID: string</code> - your app id as provided by the <a href="https://console.cloud.google.com/apis/credentials">Google API Console</a>.</li>\n<li><code class="language-text">clientSecret: string</code> - your app secret from the Google API Console</li>\n<li><code class="language-text">scope: string[]</code> - an array of strings listing the <a href="https://developers.google.com/identity/protocols/googlescopes">scope URLs</a> you need for your app.</li>\n<li><code class="language-text">redirectUri: string</code> - redirect URI for your app, must be exactly the same as the one you chose in Google API Console.</li>\n<li><code class="language-text">authUrl: ?string</code> - an optional parameter to provide a different auth URL to Google (for instance if the current one was to stop working). Defaults to <code class="language-text">https://accounts.google.com/o/oauth2/v2/auth</code>.</li>\n<li><code class="language-text">tokenUrl: ?string</code> - an optional parameter to provide a different token exchange Google API endpoint. Defaults to <code class="language-text">https://www.googleapis.com/oauth2/v4/token</code>.</li>\n<li><code class="language-text">responseType: ?string</code> - if Google was to support a different kind of OAuth authentication flow, we could specify the response type here. Currently, it only supports <code class="language-text">code</code> and so it defaults to that.</li>\n<li><code class="language-text">grantType: ?string</code> - similarly to the point above, if Google was to support a different kind of OAuth authentication flow, we could specify the grant type here. Defaults to <code class="language-text">authorization_code</code>.</li>\n</ul>\n<h4 id="code-classlanguage-textfacebookcode"><a href="#code-classlanguage-textfacebookcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">facebook.</code></h4>\n<ul>\n<li><code class="language-text">clientID: string</code> - your app id as provided by the <a href="https://developers.facebook.com/apps/">App Dashboard</a>.</li>\n<li><code class="language-text">clientSecret: string</code> - your app secret from the App Dashboard.</li>\n<li><code class="language-text">scope: string[]</code> - an array of strings listing <a href="https://developers.facebook.com/docs/facebook-login/permissions/">Facebook API scopes</a>.</li>\n<li><code class="language-text">redirectUri: string</code> - the redirect URI for your app, must be the same as in the App Dashboard.</li>\n<li><code class="language-text">authUrl: ?string</code> - see above, defaults to <code class="language-text">https://www.facebook.com/v3.0/dialog/oauth</code>.</li>\n<li><code class="language-text">tokenUrl: ?string</code> - see above, defaults to <code class="language-text">https://graph.facebook.com/v3.0/oauth/access_token</code></li>\n<li><code class="language-text">responseType: ?string</code> - unlike Google, Facebook supports different methods of OAuth authentication flow. This option can be set to <code class="language-text">code</code> (default) to receive just the auth code, <code class="language-text">token</code> to have the client receive the token immediately (useful if you\'re building a desktop application with Hadron), <code class="language-text">code token</code> to receive both and <code class="language-text">granted_scopes</code> to receive a comma-separated list of permissions the user granted to the app. See <a href="https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/#login">here</a> for details.</li>\n</ul>\n<h3 id="methods"><a href="#methods" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods</h3>\n<h4 id="code-classlanguage-textoauthgooglecode"><a href="#code-classlanguage-textoauthgooglecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">oauth.google.</code></h4>\n<ul>\n<li><code class="language-text">redirect() =&gt; string</code> - parses the config options and returns a redirect URL to the user consent screen.</li>\n<li><code class="language-text">token(code: string) =&gt; Promise</code> - exchanges the auth code in the first argument for an access token. Returns a promise which resolves to the response from Google.</li>\n</ul>\n<h4 id="code-classlanguage-textoauthfacebookcode"><a href="#code-classlanguage-textoauthfacebookcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code class="language-text">oauth.facebook.</code></h4>\n<ul>\n<li><code class="language-text">redirect(state: ?string) =&gt; string</code> - parses the config and returns a redirect URL to the user consent screen. You can provide a state string to secure your app against CSRF (<a href="https://developers.facebook.com/docs/facebook-login/security/#stateparam">see here for details</a>).</li>\n<li><code class="language-text">token(code: string) =&gt; Promise</code> - exchanges the auth code in the first argument for an access token. Returns a promise which resolves to the repsonse from Facebook.</li>\n</ul>'
}},pathContext:{relativePath:"GDK>../docs/packages/oauth.md"}}}});
//# sourceMappingURL=path---docs-packages-oauth-f57544a1cb56c7736c3d.js.map